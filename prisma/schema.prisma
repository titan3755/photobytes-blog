generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  BLOGGER
}

model User {
  id            String   @id @default(cuid())
  name          String?
  username      String?  @unique
  email         String?  @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  articles      Article[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model Article {
  id             String    @id @default(cuid())
  title          String
  slug           String    @unique // For a clean URL, e.g., /blog/my-first-post
  content        String
  excerpt        String?   // A short summary for blog feed
  featuredImage  String?   // URL for a cover image
  published      Boolean   @default(false) // To save as draft
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  authorId       String
  author         User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categories     Category[]
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  articles  Article[]
}
