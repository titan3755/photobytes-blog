generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  BLOGGER
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id                 String               @id @default(cuid())
  name               String?
  username           String?              @unique
  email              String?              @unique
  emailVerified      DateTime?
  password           String?
  image              String?
  role               Role                 @default(USER)
  createdAt          DateTime             @default(now())
  canComment         Boolean              @default(true) // 1. Add this field
  accounts           Account[]
  sessions           Session[]
  articles           Article[]
  bloggerApplication BloggerApplication?
  userNotifications  UserNotification[]
  comments           Comment[] // Relation to user's comments
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model Article {
  id             String    @id @default(cuid())
  title          String
  slug           String    @unique // For a clean URL, e.g., /blog/my-first-post
  content        String
  excerpt        String?   // A short summary for blog feed
  featuredImage  String?   // URL for a cover image
  published      Boolean   @default(false) // To save as draft
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  authorId       String
  author         User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categories     Category[]
  comments       Comment[]
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  articles  Article[]
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
  isRead    Boolean  @default(false)
  ipAddress String?
}

model BloggerApplication {
  id        String   @id @default(cuid())
  userId    String   @unique // Each user can only apply once
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reason    String   // Why they want to be a blogger
  topics    String   // What topics they want to write about
  sampleUrl String?  // Optional link to sample work
  status    ApplicationStatus @default(PENDING) // Track application status
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// --- START: New Notification Models ---

// The notification message itself
model Notification {
  id                String             @id @default(cuid())
  title             String
  description       String
  url               String? // Optional link (e.g., /blog/new-feature)
  createdAt         DateTime           @default(now())
  
  // Relation to all users who received this
  userNotifications UserNotification[]
}

// Join table to link notifications to users and track read status
model UserNotification {
  id             String       @id @default(cuid())
  isRead         Boolean      @default(false)

  // Relation to User
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relation to Notification
  notificationId String
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@unique([userId, notificationId]) // A user can only receive the same notification once
}
// --- END: New Notification Models ---

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation to User (Author)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  // Relation to Article
  articleId String
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@index([authorId])
  @@index([articleId])
}